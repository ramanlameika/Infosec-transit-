Implementing a secure user authentication system in your Python-based worldwide transit fare app involves several components: user registration, login, and password reset functionalities, all while ensuring secure handling of authentication tokens. Here's a detailed guide on how to achieve this using Flask, Flask-JWT-Extended, and Flask-Mail for password resets.
1. Setup

    Install Required Packages:

    bash

pip install Flask Flask-JWT-Extended Flask-Bcrypt Flask-Mail python-dotenv

Create Environment File:

Create a .env file for sensitive information:

plaintext

    JWT_SECRET_KEY=your_secret_key_here
    MAIL_USERNAME=your_email@example.com
    MAIL_PASSWORD=your_email_password
    MAIL_SERVER=smtp.example.com
    MAIL_PORT=587
    MAIL_USE_TLS=True

2. Flask Application Setup

Hereâ€™s how to set up the authentication system in your app.py:

python

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, decode_token
from flask_mail import Mail, Message
from dotenv import load_dotenv
import os
import datetime

# Load environment variables
load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///fares.db'
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = os.getenv('MAIL_PORT')
app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS')
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)
mail = Mail(app)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    reset_token = db.Column(db.String(120), nullable=True)

# Initialize database
@app.before_first_request
def create_tables():
    db.create_all()

# Routes

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data['username']
    email = data['email']
    password = bcrypt.generate_password_hash(data['password']).decode('utf-8')

    if User.query.filter_by(email=email).first():
        return jsonify({'message': 'Email already exists'}), 400
    if User.query.filter_by(username=username).first():
        return jsonify({'message': 'Username already exists'}), 400

    new_user = User(username=username, email=email, password=password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User registered successfully'}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data['email']
    password = data['password']

    user = User.query.filter_by(email=email).first()
    if user and bcrypt.check_password_hash(user.password, password):
        access_token = create_access_token(identity={'email': user.email}, expires_delta=datetime.timedelta(hours=1))
        return jsonify({'access_token': access_token}), 200
    return jsonify({'message': 'Invalid credentials'}), 401

@app.route('/reset_password', methods=['POST'])
def reset_password():
    data = request.get_json()
    email = data['email']
    user = User.query.filter_by(email=email).first()

    if user:
        reset_token = create_access_token(identity={'email': user.email}, expires_delta=datetime.timedelta(hours=1))
        user.reset_token = reset_token
        db.session.commit()

        msg = Message('Password Reset Request',
                      sender=app.config['MAIL_USERNAME'],
                      recipients=[email])
        msg.body = f"To reset your password, visit the following link: http://localhost:5000/reset_password/{reset_token}"
        mail.send(msg)
        
        return jsonify({'message': 'Password reset email sent'}), 200

    return jsonify({'message': 'Email not found'}), 404

@app.route('/reset_password/<token>', methods=['POST'])
def reset_password_with_token(token):
    data = request.get_json()
    new_password = data['new_password']

    try:
        decoded_token = jwt.decode_token(token)
        email = decoded_token['identity']['email']
        user = User.query.filter_by(email=email).first()

        if user and user.reset_token == token:
            user.password = bcrypt.generate_password_hash(new_password).decode('utf-8')
            user.reset_token = None
            db.session.commit()
            return jsonify({'message': 'Password updated successfully'}), 200
        else:
            return jsonify({'message': 'Invalid or expired token'}), 400
    except Exception as e:
        return jsonify({'message': 'Invalid token'}), 400

if __name__ == '__main__':
    app.run(debug=True)

3. Security Considerations

    Token Expiration: JWT tokens should have an expiration time to minimize risk if tokens are compromised.
    Password Hashing: Always hash passwords using a strong hashing algorithm (e.g., bcrypt).
    Token Revocation: Implement token revocation if needed, especially for sensitive applications.

4. Testing

    Registration: Test user registration by sending POST requests with user data.
    Login: Ensure that login correctly returns JWT tokens and that invalid credentials are handled.
    Password Reset: Verify that password reset emails are sent and that tokens are valid for password changes.

By implementing these authentication features, you can provide secure user management for your worldwide transit fare app, allowing users to register, log in, and reset their passwords securely.
